Project 1 Lexical Analyzer
COP4620
Marcus Hagans
Due: 1/22/15
Submitted:

*********************************************************************
Scope:
The project requires the use of the grammar definitions in the appendix of "Compiler Construction Principles and Practice" book in-order to construct a lexical analyzer.
The syntax analyzer will perform a top-down parser and then inform the user if the code is syntactically correct or not correct.

Program Requirements:
Project is to use the grammar definition in the appendix

of your text to guide the construction of a recursive descent parser.

The parser should follow the grammar as described in A.2 page 492.

Enhance the grammar to include FLOAT as appropriate throughout all the grammar rules.

********************************************************************
Grammer Rules:
program ->			declaration-list
declaration-list  ->			declaration declaration-listPrime
declaration-listPrime  ->			declaration declaration-listPrime | @
declaration  ->			type-specific ID moreDeclarations
moreDeclarations  ->			moreDeclarationsFactor | ( params ) compound-stmt
moreDeclarationsFactor  ->			; | [ NUM ] ;
type-specific  ->			int | void | float
params  ->			int ID paramPrime param-listPrime | void paramPrime | float ID paramPrime param-listPrime
paramPrime  ->			 ID paramPrime param-listPrime | @
param-listPrime  ->			, param param-listPrime | @
param  ->			type-specific ID paramPrime
paramPrime ->			[ ] | @
compound-stmt  ->			{ local-declarations statement-list }
local-declarations  ->			local-declarationsPrime
local-declarationsPrime  ->			type-specific ID  moreDeclarationsFactor local-declarationsPrime| @
statement-list  ->			statement-listPrime
statement-listPrime  ->			statement statement-listPrime | @
statement  ->			expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt  ->			expression ; | ;
selection-stmt  ->			if ( expression ) statement selection-stmtPrime
selection-stmtPrime  ->			else statement | @
iteration-stmt ->			while ( expression ) statement
return-stmt  ->			return return-stmtPrime
return-stmtPrime  ->			; | expression ;
expression  ->			ID expressionFactor| ( expression ) termPrime additive-expressionPrime simple-expressionPrime | NUM  termPrime additive-expressionPrime simple-expressionPrime
expressionFactor  ->			expressionPrime = expression |factorPrime termPrime additive-expressionPrime simple-expressionPrime |simple-expression
expressionPrime  ->			[ expression ] | @
simple-expression  ->			additive-expression simple-expressionPrime
simple-expressionPrime ->			relop additive-expression | @
relop  ->			<= | < | > | >= | == | !=
additive-expression  ->			term additive-expressionPrime
additive-expressionPrime ->			addop term additive-expresionPrime | @
addop ->			 + | -
term  ->			factor termPrime
termPrime  ->			mulop factor termPrime | @
mulop  ->			* | /
factor ->			( expression ) | NUM | ID factorPrime
factorPrime  ->			expressionPrime  | ( args )
args  ->			expression argsPrime | @
argsPrime ->			, expression | @
*********************************************************************************
   
How to run program:
Program consist of six files: SyntaxAnalyzer.cpp SyntaxAnalyzer.hpp LexicalAnalyzer.cpp, LexicalAnalyzer.hpp, makefile, and main.cpp that have been sharred into a file called project1 unshar it obtain the four files.  Type in "make" at the command line, which will create a executable file named p2.  Then enter either ./p2 fn or p1 fn where fn is the file you will used for the Analyzer.

The program will go token by token until either all the tokens have been consumed and the end token is found or will exit out if
 a rule has not been met.  Below is sample inputs:

test1:

int gcd (int u, int v)
{  if (v == 0) return u ;
   else return gcd(v,u-u/v*v);
   /* u-u/v*v == u mod v */
}

void main(void)
{ int x; int y;
  x = input(); y = input();
  output(gcd(x,y));
}

/* A program to perform selection sort on a 10
// element array.
*/

int x[10];

int minloc (int a[], int low, int high )
{ int i; int x; int k;
  k = low;
  x = a[low];
  i = low + 1;
  while (i < high)
  { if (a[i] < x)
    {
        x = a[i];
        k = i;
    }
    i = i + 1;
  }
  return k;
}

void sort( int a[], int low, int high )
{ int i; int k;
  i = low;
  while (i < high - 1)
  {
    int t;
    k = minloc(a,i,high);
    t = a[i];
    a[i] = t;
    i = i + 1;
  }
}

void main (void)
{ int i;
  i = 0;
  while (i < 10)
  {  x[i] = input();
     i = i + 1;
  }
  sort(x,0,10);
  i = 0;
  while (i < 10)
  {
  output(x[i]);
  i = i + 1;
  }
}

int main (void a[], int a, float b)
{
    int a[18];
    float a[18];
    void a[0];
    void a[10];

    while (i != y)
    {
        if ((x - y * z / 5 - th) / (x * (w * 7 * (t - 5))) > (4 * (u - 5)))
        {
        }
        else
        {
            functioncall(132954820 - 153890629, 7346374569 / (u - u + p / 456275 + go));
        }
    }

    if (x >= 10)
    {
        if (x == 10)
        {
        }
    }
    else if (x <= 8)
    {
    }
    else
    {
    }

    if (a)
        a = a + 1;

    return (x + y) / 100;
}

void main (void)
{
    return 0;
}

float main (void)
{
    return x;
}
